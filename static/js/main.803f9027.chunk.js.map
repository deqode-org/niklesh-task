{"version":3,"sources":["Pages/Dashboard/Dashboard.module.css","Api/index.js","Components/InputTextfield/index.jsx","Pages/Dashboard/index.jsx","Routes/path.js","Routes/index.jsx","App.jsx","serviceWorker.js","index.jsx","Components/InputTextfield/InputTextfield.module.css"],"names":["module","exports","getRandomBool","n","Math","floor","random","getSuggestions","text","results","push","Promise","resolve","reject","randomTimeout","setTimeout","KEYS_MAPPING","InputTextfield","props","getSuggestionsForWord","textToSearch","then","data","setState","suggestions","activeIndex","catch","console","error","suggestionSelected","suggestion","userInput","state","split","slice","join","inputRef","current","focus","clearSuggestions","onKeyPressed","e","length","keyPressed","which","preventDefault","onInputChange","event","value","target","lastSavedWord","pop","newWord","debouncedSuggestionFunc","React","createRef","debounce","this","showDropdown","className","styles","container","ref","input","type","placeholder","onKeyDown","onChange","onOutsideClick","dropdown","map","index","key","normal","onClick","dropdownItem","Component","Dashboard","dashboard","Paths","Redirect","Routes","basename","process","path","component","from","to","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.803f9027.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboard\":\"Dashboard_dashboard__1p9u2\"};","// Using mock code, as provided\n\nconst FAILURE_COEFF = 10;\nconst MAX_SERVER_LATENCY = 200;\n\nfunction getRandomBool(n) {\n  const maxRandomCoeff = 1000;\n  if (n > maxRandomCoeff) n = maxRandomCoeff;\n  return Math.floor(Math.random() * maxRandomCoeff) % n === 0;\n}\n\nfunction getSuggestions(text) {\n  const pre = \"pre\";\n  const post = \"post\";\n  const results = [];\n  if (getRandomBool(2)) {\n    results.push(pre + text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text + post);\n  }\n  if (getRandomBool(2)) {\n    results.push(pre + text + post);\n  }\n  return new Promise((resolve, reject) => {\n    const randomTimeout = Math.random() * MAX_SERVER_LATENCY;\n    setTimeout(() => {\n      if (getRandomBool(FAILURE_COEFF)) {\n        reject();\n      } else {\n        resolve(results);\n      }\n    }, randomTimeout);\n  });\n}\n\nexport default getSuggestions;\n","import React from \"react\";\nimport OnOutsideClick from \"react-outclick\";\nimport getSuggestions from \"../../Api\";\nimport { debounce } from \"lodash\";\nimport styles from \"./InputTextfield.module.css\";\n\nconst KEYS_MAPPING = {\n  ENTER: 13,\n  UP_ARROW: 38,\n  DOWN_ARROW: 40,\n};\n\nclass InputTextfield extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      suggestions: [],\n      activeIndex: 0,\n      userInput: \"\",\n    };\n\n    this.inputRef = React.createRef();\n    this.debouncedSuggestionFunc = debounce(this.getSuggestionsForWord, 500);\n  }\n\n  getSuggestionsForWord = (textToSearch) => {\n    getSuggestions(textToSearch)\n      .then(data => this.setState({ suggestions: data, activeIndex: 0 }))\n      .catch(console.error);\n  }\n\n  suggestionSelected = (suggestion) => {\n    const { userInput } = this.state;\n    this.setState({ \n      userInput: `${userInput.split(\" \").slice(0, -1).join(\" \")} ${suggestion} `,\n      suggestions: [],\n      activeIndex: 0,\n    });\n    this.inputRef.current.focus();\n  }\n\n  clearSuggestions = () => {\n    this.setState({ suggestions: [], activeIndex: 0 });\n  }\n\n  onKeyPressed = (e) => {\n    const { suggestions, activeIndex } = this.state;\n\n    if(suggestions.length > 0) {\n      const keyPressed = e.which;\n      if (keyPressed === KEYS_MAPPING.ENTER) {\n        this.suggestionSelected(suggestions[activeIndex]);\n      } else if (keyPressed === KEYS_MAPPING.UP_ARROW) {\n        e.preventDefault();\n\n        if (activeIndex === 0) return;\n        \n        this.setState({ activeIndex: activeIndex - 1 });\n      } else if (keyPressed === KEYS_MAPPING.DOWN_ARROW) {\n        e.preventDefault();\n        \n        if (activeIndex === suggestions.length - 1) return;\n        \n        this.setState({ activeIndex: activeIndex + 1 });\n      }\n    }\n  }\n\n  onInputChange = (event) => {\n    const { userInput } = this.state;\n    const { value } = event.target;\n\n    const lastSavedWord = userInput.split(\" \").pop();\n    const newWord = value.split(\" \").pop();\n\n    this.setState({ userInput: value });\n\n    if (!!newWord && lastSavedWord !== newWord) {\n      this.debouncedSuggestionFunc(newWord)\n    } else {\n      this.setState({ suggestions: [], activeIndex: 0 });\n    }\n  }\n\n  render() {\n    const { userInput, suggestions, activeIndex } = this.state;\n    const showDropdown = suggestions.length > 0;\n    return (\n      <div className={styles.container}>\n        <input\n          ref={this.inputRef}\n          className={styles.input}\n          type=\"text\"\n          placeholder=\"Search\"\n          value={userInput}\n          onKeyDown={this.onKeyPressed}\n          onChange={this.onInputChange}\n        />\n        {showDropdown && (\n          <OnOutsideClick onOutsideClick={this.clearSuggestions}>\n            <div className={styles.dropdown}>\n              {suggestions.map((suggestion, index) => (\n                <div\n                  key={suggestion}\n                  className={activeIndex === index ? styles.activeIndex : styles.normal}\n                  onClick={() => this.suggestionSelected(suggestion)}\n                >\n                  <p className={styles.dropdownItem}>{suggestion}</p>\n                </div>\n              ))}\n            </div>\n          </OnOutsideClick>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default InputTextfield;\n","import React from \"react\";\nimport InputTextfield from \"../../Components/InputTextfield\";\nimport styles from \"./Dashboard.module.css\";\n\nconst Dashboard = () => (\n  <div className={styles.dashboard}>\n    <InputTextfield />\n  </div>\n);\n\nexport default Dashboard;\n","const Paths = {\n  Dashboard: \"/\",\n  Redirect: \"*\",\n};\n\nexport default Paths;\n","import React from \"react\";\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\nimport Dashboard from \"../Pages/Dashboard\";\nimport Paths from \"./path\";\n\nconst Routes = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Route path={Paths.Dashboard} component={Dashboard} />\n    <Redirect from={Paths.Redirect} to={Paths.Dashboard} />\n  </Router>\n);\n\nexport default Routes;\n","import React from \"react\";\nimport Routes from \"./Routes\";\n\nconst App = () => <Routes />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\"\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === \"[::1]\"\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \"\n              + \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \"\n                  + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdown\":\"InputTextfield_dropdown__2x7nR\",\"input\":\"InputTextfield_input__2LHQ6\",\"container\":\"InputTextfield_container__2eqmE\",\"dropdownItem\":\"InputTextfield_dropdownItem__2GoDl\",\"activeIndex\":\"InputTextfield_activeIndex__15-xv\",\"normal\":\"InputTextfield_normal__31K1m\"};"],"sourceRoot":""}